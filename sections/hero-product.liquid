

{% assign science-display = 'product-vid-placeholder.webp' | asset_url | append: '?v=' | append: 'timestamp' %}
{% assign product_display = 'healthcare_hero-img.png' | asset_url | append: '?v=' | append: 'timestamp' %}
{% assign three_asset = 'air_purifier.gltf' | asset_url %}
{{ 'air_purifier.gltf' | asset_url | preload_tag: as: 'fetch' }}

{% style %}
  #shopify-section-{{section.id}}.hero-product {
  	padding-bottom: unset;
  	padding-top: 164px;
  	background: linear-gradient(
  			180deg,
  			rgba(170, 126, 113, 0.1) 0%,
  			rgba(170, 126, 113, 0.0) 100%
  		), #fff;
  }
  #shopify-section-{{section.id}}.hero-product .container {
  	display: flex;
  	flex-direction: row;
  	align-items: center;
  	justify-content: space-between;
  	gap: 79px;
  }
  #shopify-section-{{section.id}}.hero-product .content {
  	max-width: 500px;
  }
  #shopify-section-{{section.id}}.hero-product .illus {
  	flex: 1;
  	border-radius: 16px;
  	object-fit: contain;
  	height: 400px;
      width: 80%;
  }
  
  @media only screen and (max-width: 990px) {
  		#shopify-section-{{section.id}}.hero-product .illus {
  			width: 100%;
  			max-width: 100%;
  			flex: unset;
  			height: 400px;
  		}
  		#shopify-section-{{section.id}}.hero-product .container {
  			flex-direction: column;
  			gap: 40px;
  		}
  		#shopify-section-{{section.id}}.hero-product .content {
  			max-width: 100%;
  		}
  	}
  
  
  @media (max-width: 768px) {
  	#shopify-section-{{section.id}}.hero-product {
  		padding-top: 120px;
  	}
  
  	#shopify-section-{{section.id}}.hero-product .content {
  		max-width: 100%;
  		padding: 0 0;
  	}
  	#shopify-section-{{section.id}}.hero-product .content > h1{
  		font-size: 40px;
  	}
  	#shopify-section-{{section.id}}.hero-product .content > h1 > span{
  		font-size: 40px;
  	}
  	#shopify-section-{{section.id}}.hero-product .content > p{
  		font-size: 16px;
  	}
  
  	#shopify-section-{{section.id}}.hero-product .illus {
  		height: 250px;
          width: 100%;
  	}
  }
{% endstyle %}
    
<div class="container">
    <div class="content">
        <h1 class="m-btm m-32">
					{% if section.settings.section_title != blank %}
						{{ section.settings.section_title }}
					{% else %}
						Improve Your <br>
						<span>Memory<sup>Â®</sup>...</span> <br>
						While You <span>Sleep</span>
					{% endif %}
        </h1>
        <p>
					{% if section.settings.section_desc != blank %}
						{{ section.settings.section_desc }}
					{% else %}
						The revolutionary new product that improves memory while you sleep. Created by a world
						famous Neuroscientist.
					{% endif %}
        </p>
				<div class="btn-wrap m-top m-54">
					{% if section.settings.section_product != blank %}
						<a class="btn is-black" href="{{ section.settings.section_product.url }}">Buy Now</a>
					{% endif %}
				</div>
    </div>

		<div id="threejs-container" style="height: 600px;" class="illus"></div>
</div>

<script>
	let model, renderer, camera, scene;
	let lights = [];
    let scale = 0.6
    if(window.innerWidth < 768){
      scale = 0.9
    }

	document.addEventListener("DOMContentLoaded", function () {
			const container = document.getElementById("threejs-container");
			
			if (!container) {
					return;
			}
			
			scene = new THREE.Scene();
			
			renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
			renderer.setSize(container.clientWidth, container.clientHeight);
			renderer.setClearColor(0x000000, 0);
			container.appendChild(renderer.domElement);
	
			const loader = new THREE.GLTFLoader();
			loader.load("{{ three_asset }}", function (gltf) {

					model = gltf.scene;
					model.scale.set(1, 1, 1);
					scene.add(model);

					const glbCamera = gltf.cameras[0]; 
					if (glbCamera) {
							camera = glbCamera;
					}
					
					model.children[0].traverse((object) => {
							if (object.isLight) {
									lights.push(object);
							}
					});

					if(lights.length){
							lights[3].intensity = 0.5
							lights[2].intensity = 0.9
							lights[1].intensity = 0.9
							lights[0].intensity = 3
					}

					const mainObject = model.children[0].children[0];
					if (mainObject) {
							function animate() {
									requestAnimationFrame(animate);
									mainObject.rotation.y += 0.005;
									renderer.render(scene, camera);
							}
							animate();
							fitModelToContainer(model, camera, container);
					}
					
					
			}, undefined, function (error) {
					console.error("Gagal memuat model:", error);
			});
			
			$('#rotate-btn').click(()=>{
					rotateModelSmooth(model, "right");
					renderer.render(scene, camera);
			})
			
			window.addEventListener("resize", () => {
					renderer.setSize(container.clientWidth, container.clientHeight);
					fitModelToContainer(model, camera, container);
					renderer.render(scene, camera);
			});
	});

	function rotateModelSmooth(model, direction = "right", duration = 1) {
			if (!model) return;
	
			const targetRotation = model.rotation.y + (direction === "right" ? Math.PI / 2 : -Math.PI / 2);
			const startRotation = model.rotation.y;
			const startTime = performance.now();
	
			function animateRotation(time) {
					const elapsed = (time - startTime) / (duration * 1000);
					if (elapsed < 1) {
							model.rotation.y = startRotation + (targetRotation - startRotation) * elapsed;
							requestAnimationFrame(animateRotation);
					} else {
							model.rotation.y = targetRotation;
					}
					renderer.render(scene, camera);
			}
	
			requestAnimationFrame(animateRotation);
	}

	function fitModelToContainer(model, camera, container) {
			const box = new THREE.Box3().setFromObject(model);
			const size = box.getSize(new THREE.Vector3());
			const center = box.getCenter(new THREE.Vector3());

			const aspectRatio = container.clientWidth / container.clientHeight;
			camera.aspect = aspectRatio;
			camera.updateProjectionMatrix();

			const maxDim = Math.max(size.x, size.y, size.z);
			const fov = camera.fov * (Math.PI / 180);
			const distance = maxDim / Math.tan(fov / 2);

			camera.position.set(center.x, center.y, center.z + distance * scale);
			camera.lookAt(center);
	}
</script>
    
    
{% schema %}
	{
		"tag": "section",
		"class": "hero-product",
		"settings":[
			{
				"type": "textarea",
				"id": "section_title",
				"label": "Section title",
				"info": "Wrap italic font with <span>"
			},
			{
				"type": "textarea",
				"id": "section_desc",
				"label": "Section description",
			},
			{
				"type": "product",
				"id": "section_product",
				"label": "Selected product"
			},
			{
				"type": "url",
				"id": "video_cta",
				"label": "Watch video url"
			},
			{
				"type": "image_picker",
				"id": "section_img",
				"label": "Section image"
			},
		]
	}
{% endschema %}